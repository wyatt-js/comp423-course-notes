{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Wyatt's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Go Setup","text":"<ul> <li>Primary author: Wyatt Smith</li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Some Programming Experience (like knowing about functions)</li> <li>Install VSCode</li> <li>A Command Terminal (any terminal on Linux and Mac, or PowerShell or cmd in Windows)</li> </ul>"},{"location":"tutorials/go-setup/#setting-up-a-dev-container-for-go","title":"Setting Up a Dev Container for Go","text":"<ul> <li>Start by creating a directory for your Go project with the following command:</li> </ul> <pre><code>mkdir [name of project]\ncd [name of project]\n</code></pre> <ul> <li>Initialize a git repository for version control:</li> </ul> <p><code>git init</code></p> <ul> <li>Connect your local repository to the remote repository:</li> </ul> <p><code>git remote add origin [repository-url]</code></p> <ul> <li>Install the Visual Studio Code Dev Containers Extension</li> <li>Create the .devcontainer folder and configuration file</li> </ul> <pre><code>mkdir .devcontainer\ncd .devcontainer\ntouch devcontainer.json\n</code></pre> <ul> <li>Configure the file with the following code (fill in project name in last line):</li> </ul> <pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"golang.go\"\n      ]\n    }\n  },\n  \"settings\": {\n    \"go.gopath\": \"/go\",\n    \"go.useLanguageServer\": true\n  },\n  \"postCreateCommand\": \"go mod init [my-go-project]\",\n}\n</code></pre> <ul> <li> <p>Such code does the following:</p> <ul> <li>Names your dev container</li> <li>Specifies the Microsoft Go Dev Container base image</li> <li>Installs the official Go VS Code plugin</li> <li>Sets the Go workspace path and enables the Go language server</li> <li>Initializes a Go module for the project upon container creation</li> </ul> </li> <li> <p>Start the dev container by selecting the following option in the VSCode Command Palette:</p> </li> </ul> <p><code>&gt; Dev Containers: Reopen in Container</code></p>"},{"location":"tutorials/go-setup/#creating-a-new-project","title":"Creating a New Project","text":"<ul> <li>Create a file [name].go in which to write your code</li> <li>Add the following to the file to create the output, \"Hello COMP423\":</li> </ul> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre> <ul> <li>Such code does the following:<ul> <li>Declares a main package</li> <li>Imports the fmt package to allow printing to the console.</li> <li>Implements a main function to print a message to the console.</li> </ul> </li> <li>Use the following command to compile and run the package:</li> </ul> <p><code>go run .</code></p>"},{"location":"tutorials/go-setup/#subcommands","title":"Subcommands","text":""},{"location":"tutorials/go-setup/#version-subcommand","title":"Version Subcommand","text":"<ul> <li>The version subcommand is used to check the installed version of Go:</li> </ul> <p><code>go version</code></p>"},{"location":"tutorials/go-setup/#mod-subcommand","title":"Mod Subcommand","text":"<ul> <li>The mod subcommand is used to track dependencies for your code. A go.mod file will track the modules that provide packages to your code. The following command will create the file:</li> </ul> <p><code>go mod init [module path]</code></p> <ul> <li>Fill in [module path] with the path of the module that your code will be in.</li> </ul>"},{"location":"tutorials/go-setup/#run-subcommand","title":"Run Subcommand","text":"<ul> <li>The run subcommand is used to compile and run the go package defined as main. The following command will run the main package in the working directory:</li> </ul> <p><code>go run .</code></p>"},{"location":"tutorials/go-setup/#build-subcommand","title":"Build Subcommand","text":"<ul> <li>The build subcommand is used to compile a Go package into a binary executable file.</li> </ul> <p><code>go build [package name]</code></p> <ul> <li>This is similar to running the following command on a C file:</li> </ul> <p><code>gcc [file name]</code></p> <ul> <li>The produced executable file can then be run with the following commands:</li> </ul> <pre><code>./hello # (Linux/Mac)\nhello.exe  # (Windows)\n</code></pre> <p>This is different from the run command in that it produces and saves an executable file, whereas run does not save an executable, but only runs it.</p>"}]}